# -*- coding: utf-8 -*-
"""Final_ModelSP500.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162pJbswppZ8_exp-_Rxsbr_By8WZFxM8

# Time series with FBprophet

### Packages and libraries to install
"""

!pip install pystan~=2.14  #This specific version of pystan must be installed to have fbprophet
!pip install fbprophet
!pip install yfinance

"""Libraries"""

import pandas as pd
import numpy as np
import yfinance as yf
from datetime import date, datetime
from pandas_datareader import data as pdr
import matplotlib.pyplot as plt
import json
import plotly.express as px
from statsmodels.tools.eval_measures import rmse
from fbprophet.serialize import model_to_json, model_from_json

"""Facebook specific libraries"""

from fbprophet import Prophet
from fbprophet.plot import plot_plotly, plot_components_plotly
from prophet.diagnostics import cross_validation
from prophet.diagnostics import performance_metrics

"""### Starting the analysis

Data from Yahoo finance
"""

yf.pdr_override() 
reduced_df = pdr.get_data_yahoo("^GSPC", start="2018-01-01", end= date.isoformat(date.today()), utc=True).reset_index()

spy = reduced_df[['Date', 'Close']]
spy.columns = ['ds', 'y']

"""Plot the dataframe ðŸ“‰"""

# fig = px.line(spy, x='ds', y='y', title='spy')
# fig.show()

"""### Creating and Training the model
You fit the model ***on all the dataset *** it is like this in FBprophet

"""

fbp = Prophet()
fbp.add_seasonality(name='monthly', period=30.5, fourier_order=5)
fbp.fit(spy)

"""### Predictions

Split sample train/test on 1 year
"""

train = spy[spy['ds'] < pd.Timestamp('2021-09-05')]
test = spy[spy['ds'] >= pd.Timestamp('2021-09-05')]

print(f"Number of months in train data: {len(train)}")
print(f"Number of months in test data: {len(test)}")

"""Predict"""

forecast = fbp.predict(test)

plot_plotly(fbp, forecast)

forecast

forecast['yhat']

forecast['trend'] = np.where(forecast['yhat'].shift(-1) > forecast['yhat'], 1, 0)

forecast

forecast['trend'].iloc[-1]

"""Scoring"""

predictions = forecast.iloc[-len(test):]['yhat']
actuals = test['y']

print(f"RMSE: {round(rmse(predictions, actuals))}")

difference = forecast['yhat'].values - test['y'].values
pd.DataFrame(difference)

"""## Saving model"""

# Save model
with open('serialized_model.json', 'w') as fout:
    json.dump(model_to_json(fbp), fout)

# # Load model
# with open('serialized_model.json', 'r') as fin:
#     m = model_from_json(json.load(fin))

